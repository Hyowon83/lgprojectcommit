{
  "schemaVersion": "1.0.0",
  "imports": [
    "js/aw-flex-row.directive",
    "js/aw-flex-column.directive",
    "js/aw-progress-indicator.directive",
    "js/visible-when.directive",
    "js/aw-i18n.directive",
    "js/aw-click.directive",
    "js/aw-layout-slot.directive"
  ],
  "data": {
    "narrowModeStyle": "",
    "skipToMainClickEvent": null
  },
  "actions": {
    "updateDailyVisitorValue": {
      "actionType": "JSFunction",
      "method": "updateDailyVisitorValue",
      "inputData": {
        "ctx": "{{ctx}}"
      },
      "deps": "js/dashboardChart"
    },
    "checkNarrowMode": {
      "actionType": "JSFunction",
      "method": "checkNarrowMode",
      "deps": "js/aw.narrowMode.service",
      "outputData": {
        "narrowModeStyle": ""
      }
    },
    "checkShowUserSettingsBarValue": {
      "actionType": "batchJob",
      "steps": [
        {
          "action": "checkNarrowMode"
        },
        {
          "action": "getShowUserSettingsBarValueInLocalStorage"
        },
        {
          "action": "setShowUserSettingsBarValueInCtx"
        },
        {
          "action": "initializeSkipToMainListener"
        },
        {
          "action": "setL2UserAction"
        },
        {
          "action": "loadUnreadMessages"
        }
      ]
    },
    "getShowUserSettingsBarValueInLocalStorage": {
      "actionType": "JSFunction",
      "method": "get",
      "deps": "js/localStorage",
      "inputData": {
        "topic": "showUserSettingsBar"
      },
      "outputData": {
        "showUserSettingsBar": ""
      }
    },
    "setShowUserSettingsBarValueInCtx": {
      "actionType": "JSFunction",
      "method": "modifyCtx",
      "deps": "js/modifyCtxService",
      "inputData": {
        "methodType": "update",
        "name": "showUserSettingsBar",
        "value": "{{data.showUserSettingsBar}}"
      }
    },
    "toggleShowUserSettingsBarValueInLocalStorage": {
      "actionType": "JSFunction",
      "method": "publish",
      "deps": "js/localStorage",
      "inputData": {
        "topic": "showUserSettingsBar",
        "data": "{{ctx.showUserSettingsBar}}"
      }
    },
    "initializeSkipToMainListener": {
      "actionType": "JSFunction",
      "method": "initializeSkipToMain",
      "deps": "js/wcagService",
      "inputData": {
        "data": "{{data}}"
      }
    },
    "commonRootLoadedAction": {
      "actionType": "JSFunction",
      "method": "excludeCommands",
      "inputData": {
        "data": "{{data}}",
        "ctx": "{{ctx}}"
      },
      "deps": "js/lgepCommandExcludeService"
    },
    "updateThemeConfigAction": {
      "actionType": "JSFunction",
      "method": "updateThemeConfigAction",
      "inputData": {
        "data": "{{data}}",
        "ctx": "{{ctx}}"
      },
      "deps": "js/L2ThemeConfigService"
    },
    "setL2UserAction": {
      "actionType": "JSFunction",
      "method": "setL2UserAction",
      "inputData": {
        "data": "{{data}}",
        "ctx": "{{ctx}}"
      },
      "deps": "js/dashboardList"
    },
    "iconClick": {
      "actionType": "JSFunction",
      "method": "iconClick",
      "inputData": {
        "data": "{{data}}",
        "ctx": "{{ctx}}"
      },
      "deps": "js/changeNavigateColorService"
    },
    "loadUnreadMessages": {
      "actionType": "TcSoaService",
      "serviceName": "Internal-AWS2-2019-06-Finder",
      "method": "performSearchViewModel4",
      "inputData": {
        "columnConfigInput": {
          "clientName": "AWClient",
          "clientScopeURI": ""
        },
        "inflateProperties": false,
        "saveColumnConfigData": {

        },
        "searchInput": {
          "maxToLoad": "{{data.messageToLoad.dbValue}}",
          "maxToReturn": 190,
          "providerName": "Fnd0MessageProvider",
          "searchCriteria": {
            "Fnd0Message": "*"
          },
          "searchFilterFieldSortType": "Alphabetical",
          "searchFilterMap6": {
            "fnd0ApplicationType": [
              {
                "searchFilterType": "StringFilter",
                "stringValue": "{{data.appTypes}}",
                "selected": false,
                "stringDisplayValue": "",
                "startDateValue": "",
                "endDateValue": "",
                "startNumericValue": 0,
                "endNumericValue": 0,
                "count": 0,
                "startEndRange": ""
              }
            ],
            "fnd0MessageReadFlag": [
              {
                "searchFilterType": "StringFilter",
                "stringValue": "FALSE",
                "selected": false,
                "stringDisplayValue": "",
                "startDateValue": "",
                "endDateValue": "",
                "startNumericValue": 0,
                "endNumericValue": 0,
                "count": 0,
                "startEndRange": ""
              }
            ]
          },
          "searchSortCriteria": [
            {
              "fieldName": "fnd0SentDate",
              "sortDirection": "DESC"
            }
          ]
        }
      },
      "policy": {
        "types": [
          {
            "name": "Fnd0Message",
            "properties": [
              {
                "name": "awp0CellProperties"
              },
              {
                "name": "fnd0Subject"
              },
              {
                "name": "fnd0ApplicationType"
              },
              {
                "name": "fnd0MessageReadFlag"
              },
              {
                "name": "fnd0SentDate"
              },
              {
                "name":"fnd0TargetObject",
                "modifiers": [
                    {
                        "name": "withProperties",
                        "Value": "true"
                    }
                ]
              },
              {
                "name": "fnd0RelatedObjects",
                "modifiers": [
                    {
                        "name": "withProperties",
                        "Value": "true"
                    }
                ]
              },
              {
                "name": "fnd0EventType",
                "modifiers": [
                                 {
                                    "name": "withProperties",
                                    "Value": "true"
                                 }
                             ]
              }
            ]
          },
          {
            "name": "ImanEventType",
            "properties": [
                {
                    "name":"eventtype_id"
                }
            ]
          }
        ]
      },
      "outputData": {
        "ctx.unreadMessageCount": "totalFound",
        "searchResults": "{{function:getMessageObjects}}",
        "searchFilterMap3":"searchFilterMap6",
        "response": "{{data.searchResults}}"
      },
        "events":
        {
            "success":
            [
                {
                    "name": "loadMessageObjects"
                }
            ]
        },
      "deps": "js/aw.notification.service"
    }
  },
  "dataProviders": {},
  "functions": {},
  "onEvent": [
    {
      "eventId": "aw.windowResize",
      "action": "checkNarrowMode"
    },
    {
      "eventId": "appCtx.update",
      "condition": "name === 'showUserSettingsBar'",
      "action": "toggleShowUserSettingsBarValueInLocalStorage"
    },
    {
      "eventId": "commonRoot.contentLoaded",
      "action": "commonRootLoadedAction"
    },
    {
      "eventId": "commonRoot.contentLoaded",
      "action": "updateDailyVisitorValue"
    },
    {
      "eventId": "commonRoot.contentLoaded",
      "action": "updateThemeConfigAction"
    },
    {
      "eventId": "displayRuleProvider.modelObjectsUpdated",
      "action": "setL2UserAction"
    },
    {
      "eventId": "$locationChangeSuccess",
      "action": "setL2UserAction"
    },
    {
      "eventId": "commonGlobalNavigationBar.contentLoaded",
      "action": "iconClick"
    },
    {
      "eventId": "$locationChangeSuccess",
      "action": "iconClick",
      "cacheEventData": true
    }
  ],
  "i18n": {
    "skipToMainLabel": ["UIElementsMessages"]
  },
  "messages": {},
  "conditions": {
    "isTaskbarFullScreen": {
      "expression": "ctx.taskbarfullscreen && ctx.taskbarfullscreen === 'true'"
    }
  },
  "lifecycleHooks": {
    "onMount": "checkShowUserSettingsBarValue"
  }
}
